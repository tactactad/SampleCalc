==============================
画面に動作を仕込もう。
==============================

イベント
=================

ブラウザである要素をクリックしたり、マウスカーソルが重なったり、キーボードでキーが押されたりすると、ある信号が通知されJavaScriptプログラムでも知る事ができます。この信号を受け取る事を **イベントが起こる** という言い方をします。起こるイベントに対応して処理を行うようにプログラムする事を **イベントドリブンプログラミング**  と呼び、一般的なGUIアプリケーションでも同様の手法が使われています。また、そのイベントに対応した処理の事を **イベントハンドラ／イベントリスナ** と呼びます。

.. note::

    イベントハンドラとイベントリスナの違いは設定方法です。ハンドラは一つの処理しか登録できませんが、リスナは複数の処理を登録できます。……そうだったのか。

イベントは表示しているページ全体で起こる事もあれば、個別の要素で起こる事もあります。SampleCalcではボタンを押されたら何かしらの処理を行います。具体的には、7と表示されているボタン要素の上でマウスがクリックされたら（イベント発動）、7を入力しその時々に応じた処理（イベントハンドラ）を行います。イベントハンドラとして登録する処理はsampleCalc.jsにこれから実装するinputValueメソッドです。

全てのボタンに対応するメソッドをイベントリスナとして登録する事から始めましょう！

$関数による要素の取得
==============================

イベントリスナをボタンに登録するには該当するボタン要素を取得しなければなりません。その時に威力を発揮するのが *jQuery* の **$関数** です。$関数にセレクタ文字列を渡すとそれにマッチする要素を返してくれます。セレクタはCSS準拠のものあれば独自のものもあります。

.. warning::

    返される要素はもちろんjQueryオブジェクトへ変換済みです。

index.htmlにある要素にはそれぞれは個別に判断できるようにID属性が振られていますのでそれを使って取得する事ができますし、classにもグループ化して名前を振っていますのでそれを使って取得する事ができます。数字や演算子のボタンは登録するイベントリスナは同じものになりそうなのでクラス名を使って一気に取得しましょう。

::

    $('#buttonAdd'); // +ボタンの要素を返します。
    $('.num'); // classにnumが指定されている要素を返します。数字ボタン。

$関数による要素の取得は第二引数に検索する範囲を与えられたり、スペース区切りで連続してセレクタを記述する事でさらに絞り込めたり、またそのセレクタ構文もたくさんあります。上記は一番単純な例です。

.. note::

    上手に使うとほぼ全て場合で要素を一発で取得する事ができます。是非活用してください。

    * `jQuery() – jQuery API <http://api.jquery.com/jQuery/>`_
    * `Selectors – jQuery API <http://api.jquery.com/category/selectors/>`_

.click()
==============================

ボタン要素が取得できたのでイベントリスナを登録していきます。登録するリスナの中身はまだからっぽですが。

イベントハンドラ／イベントリスナを登録するには幾つかの方法がありますが、今回は *jQuery* のイベントリスナ登録用のメソッドを使いましょう。 *jQuery* にはイベントとイベントリスナをそれぞれ設定する汎用メソッドが用意されていますが、よく使われるイベントにはイベントリスナを渡すだけで登録してくれる省略形が用意されているのです。

.. note::

    こちらもたくさんのイベント用のメソッドが用意されています。

    * `Events – jQuery API <http://api.jquery.com/category/events/>`_

ボタンが押されるイベントですから、そのものズバリな *.click()* を使います。これらのメソッドも *jQuery* らしくメソッドチェーンにも対応していますので、前述の要素取得のための$関数にそのまま続けて記述する事ができます。

::

    $('.num').click(function () {
        cals.inputValue();
    });

.. note::

    第一引数にイベントリスナで使うデータを渡す事もできます。::

        $(spam).click({'ham': 'eggs'}, function (event) {
            console.log(event.data.ham);  // eggsが出力される。
        });

    .. warning::

        eventオブジェクトを使ってアクセスする必要があります。

.. note::

    JavaScriptではコールバックとして無名関数を渡す技法がよく使われます。イベントドリブンにコールバックの相性も抜群ですからね。

数字だけでなく、演算子などの他のボタンにも同様にイベントリスナを登録をやってしまいましょう。

console.log()
==============================

*.click()* でイベントリスナを登録しましたから、ボタンとSampleCalcのメソッドは間違いなく接続されています。接続されていますが、実際の処理が何も書かれていませんから何も変化も起きずに本当に繋がっているのかわかりません。正直なところ怪しいものです。そこで、*console.log()* を用いてログを出力させて見る事にしましょう。実際に呼ばれているメソッドはどれなのか、渡された値は何だったのか、その辺りを出力しておけばデバッグ時にも役立ちます。

そこで、各メソッドの先頭にメソッド名と、引数で値が渡ってくる場合はその値を出力するようにしましょう。

::

    ...
    SampleCalc.prototype = {
        ...
        inputValue: function (value) {
            console.log('inputValueに渡された値は ' + value + ' です。');
        },
        ...
        clear: function () {
            console.log('Cボタンが押されました。');
        },
        ...
    };

さて、index.htmlをリロードし、コンソール画面を表示させて、適当に電卓のボタンをぽちぽちしてみてください。コンソールに想定する文字が出力されるはずです！

.. note::

    Safariを使っている場合は、“環境設定” -> “詳細”で“メニューバーに“開発”メニューを表示”にチェックを入れた後、“開発”メニューから“エラーコンソールを表示”を選択。

    Google Chromeを使っている場合は、“表示”メニューから“開発／管理” -> “JavaScript コンソール”を選択してください。

    Firefoxを使っている場合は、Firebugのインストールが必要になります。

    コンソールはFirebug由来の機能ですが、広く使われるようになりました。実行上のちょっとした確認などにも便利に使えます。こちらも是非活用していきましょう :-)

    `Chrome デベロッパー ツール: コンソール - Google Chrome デベロッパー ツール - Google Code <http://code.google.com/intl/ja/chrome/devtools/docs/console.html>`_
